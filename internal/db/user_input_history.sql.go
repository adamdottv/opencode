// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_input_history.sql

package db

import (
	"context"
)

const countUserInputHistoryBySession = `-- name: CountUserInputHistoryBySession :one
SELECT COUNT(*)
FROM user_input_history
WHERE session_id = ?
`

func (q *Queries) CountUserInputHistoryBySession(ctx context.Context, sessionID string) (int64, error) {
	row := q.queryRow(ctx, q.countUserInputHistoryBySessionStmt, countUserInputHistoryBySession, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserInputHistory = `-- name: CreateUserInputHistory :one
INSERT INTO user_input_history (
    id,
    session_id,
    input_text
) VALUES (
    ?, ?, ?
)
RETURNING id, session_id, input_text, created_at
`

type CreateUserInputHistoryParams struct {
	ID        string `json:"id"`
	SessionID string `json:"session_id"`
	InputText string `json:"input_text"`
}

func (q *Queries) CreateUserInputHistory(ctx context.Context, arg CreateUserInputHistoryParams) (UserInputHistory, error) {
	row := q.queryRow(ctx, q.createUserInputHistoryStmt, createUserInputHistory, arg.ID, arg.SessionID, arg.InputText)
	var i UserInputHistory
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.InputText,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSessionUserInputHistory = `-- name: DeleteSessionUserInputHistory :exec
DELETE FROM user_input_history
WHERE session_id = ?
`

func (q *Queries) DeleteSessionUserInputHistory(ctx context.Context, sessionID string) error {
	_, err := q.exec(ctx, q.deleteSessionUserInputHistoryStmt, deleteSessionUserInputHistory, sessionID)
	return err
}

const getUserInputHistoryBySession = `-- name: GetUserInputHistoryBySession :many
SELECT id, session_id, input_text, created_at
FROM user_input_history
WHERE session_id = ?
ORDER BY created_at DESC, ROWID DESC
LIMIT ?
`

type GetUserInputHistoryBySessionParams struct {
	SessionID string `json:"session_id"`
	Limit     int64  `json:"limit"`
}

func (q *Queries) GetUserInputHistoryBySession(ctx context.Context, arg GetUserInputHistoryBySessionParams) ([]UserInputHistory, error) {
	rows, err := q.query(ctx, q.getUserInputHistoryBySessionStmt, getUserInputHistoryBySession, arg.SessionID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserInputHistory{}
	for rows.Next() {
		var i UserInputHistory
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.InputText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
